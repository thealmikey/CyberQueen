package com.cyberqueen

object CyberQueen {

  case class Command(name:String, abbreviation:String, code:Int)

  val AbortSessionRequest = Command("Abort-Session-Request","ASR",274)
  val AbortSessionAnswer = Command("Abort-Session-Answer", "ASA", 274)
  val AccountingRequest = Command("Accounting-Request", "ACR", 271)
  val AccountingAnswer = Command("Accounting-Answer","ACA",271)
  val CapabilitiesExchangeRequest = Command("Capabilities-Exchange-Request","CER",257)
  val capabilitiesExchangeAnswer = Command("Capabilities-Exchange-Answer","CEA",257)
  val DeviceWatchdogRequest = Command("Device-Wachtdog-Request","DWR",280)
  val DeviceWatchdogAnswer = Command("Device-Watchdog-Answer","DWA",280)
  val DisconnectPeerRequest = Command("Disconnect-Peer-Request", "DPR", 282)
  val DisconnetPeerAnswer = Command("Disconnect-Peer-Answer","DPA",282)
  val ReAuthRequest = Command("Re-Auth-Request","RAR",258)
  val ReAuthAnswer = Command("Re-Auth-Answer","RAA",258)
  val SessionTerminationRequest = Command("Session-Termination-Request", "STR", 275)
  val SessionTerminationAnswer = Command("Session-Termination-Answer", "STA", 275)

  //AVP --> Attribut-Value-Pairs
  case class BaseAVP(name:String, code:Int, type:String, flag:Option[String])



  val AcctInterimInterval = BaseAVP("Acct-Interim-Interval", 85, "Unsigned32", Some("M"))
  val AccountingRealtimeRequired = BaseAVP("Accounting-Realtime-Required", 483, Enumerated Some("M"))
  val AcctMultiSessionId = BaseAVP("Acct-Multi-Session-Id", 50, "UTF8String",Some("M"))
  val AccountingRecordNumber = BaseAVP("Accounting-Record-Number",485,"Unsigned32" Some("M"))
  val AccountingRecordType = BaseAVP("Accounting-Record-Type",480,"Enumerated",Some("M"))
  val AcctSessionId = BaseAVP("Acct-Session-Id",44,"OctetString",Some("M"))
  val AccountingSubSessionId = BaseAVP("Accounting-Sub-Session-Id",287,Unsigned64 Some("M"))
  val AcctApplicationId = BaseAVP("Acct-Application-Id",259,"Unsigned32",Some("M"))
  val AuthApplicationId = BaseAVP("Auth-Application-Id",258,"Unsigned32", Some("M"))
  val AuthRequestType = BaseAVP("Auth-Request-Type",274,"Enumerated", Some("M"))
  val AuthorizationLifetime =BaseAVP("Authorization-Lifetime",291,"Unsigned32", Some("M"))
  val AuthGracePeriod = BaseAVP("Auth-Grace-Period",276,"Unsigned32", Some("M"))
  val AuthSessionState = BaseAVP("Auth-Session-State",277,"Enumerated", Some("M"))
  val ReAuthRequestType = BaseAVP("Re-Auth-Request-Type",285,"Enumerated", Some("M"))
  val BaseAVPClass = BaseAVP("Class",25,"OctetString",Some("M"))
  val DestinationHost =BaseAVP("Destination-Host",293,"DiameterIdentity", Some("M"))
  val DestinationRealm = BaseAVP("Destination-Realm",283, "DiameterIdentity", Some("M"))
  val DisconnectCause = BaseAVP("Disconnect-Cause",273,"Enumerated", Some("M"))
  val ErrorMessage =  BaseAVP("Error-Message",281 UTF8String, None)
  val ErrorReporting = BaseAVP("Error-Reporting-Host",294,"DiameterIdentity", None)
  val EventTimestamp = BaseAVP("Event-Timestamp",55,"Time",Some("M"))
  val ExperimentalResult = BaseAVP("Experimental-Result",297,"Grouped",Some("M"))
  val ExperimentalResultCode = BaseAVP("Experimental-Result-Code",298,"Unsigned32", Some("M"))
  val FailedAVP = BaseAVP("Failed-AVP",279,"Grouped",Some("M"))

  val FirmwareRevission = BaseAVP("Firmware-Revision",267,"Unsigned32", None)
  val HostIpAddress = BaseAVP("Host-IP-Address",257,"Address",Some(M))
  val InbandSecutiryId = BaseAVP("Inband-Security-Id",299,"Unsigned32", Some(M))
  val MultiRoundTimeOut = BaseAVP("Multi-Round-Time-Out",272,"Unsigned32", Some(M))
  val OriginHost =BaseAVP("Origin-Host",264,"DiameterIdentity", Some(M))
  val OriginRealm = BaseAVP("Origin-Realm",296,"DiameterIdentity", Some(M))
  val OriginStateId = BaseAVP("Origin-State-Id",278,"Unsigned32", Some(M))
  val ProductName = BaseAVP("Product-Name",269,"UTF8String",None)
  val ProxyHost = BaseAVP("Proxy-Host",280,"DiameterIdentity", Some(M))
  val ProxyInfo = BaseAVP("Proxy-Info",284,"Grouped",Some(M))
  val ProxyState = BaseAVP("Proxy-State",33,"OctetString",Some(M))
  val RedirectHost = BaseAVP("Redirect-Host",292,"DiameterURI",Some(M))
  val redirectHostUsage = BaseAVP("Redirect-Host-Usage",261,"Enumerated",Some(M))
  val RedirectMaxCacheTime = BaseAVP("Redirect-Max-Cache-Time",262,"Unsigned32", Some(M))
  val ResultCode = BaseAVP("Result-Code",268,"Unsigned32", Some(M))
  val RouteRecord = BaseAVP("Route-Record",282,"DiameterIdentity", Some(M))
  val SessionId = BaseAVP("Session-Id",263,"UTF8String",Some(M))
  val SessionTimeout = BaseAVP("Session-Timeout",27,"Unsigned32", Some(M))
  val SessionBinding = BaseAVP("Session-Binding",270,"Unsigned32", Some(M))
  val SessionServerFailover = BaseAVP("Session-Server-Failover",271,"Enumerated",Some(M))
  val SupportedVendorId = BaseAVP("Supported-Vendor-Id",265,"Unsigned32", Some(M))
  val TerminationCause = BaseAVP("Termination-Cause",295,"Enumerated",Some(M))
  val UserName = BaseAVP("User-Name",1,"UTF8String",Some(M))
  val VendorId = BaseAVP("Vendor-Id",266,"Unsigned32", Some(M))
  val VendorSpecificApplicationId = BaseAVP("Vendor-Specific-Application-Id",260,"Grouped",Some(M))

}
